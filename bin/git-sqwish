#!/bin/sh

# Rename variables
master="$1"

# If a message was provided, use it
# TODO: Find a better solution for handling of CLI options
# DEV: git-sqwish --message "Hi" master
if test "$1" = "-m" || test "$1" = "--message"; then
  message="$2"
  master="$3"
elif test "$2" = "-m" || test "$2" = "--message"; then
# DEV: git-sqwish master --message "Hi"
  message="$3"
fi

# If no master branch is provided, complain and leave
branch_exists() {
  git rev-parse $1 1> /dev/null 2> /dev/null
}
if test -z $master; then
  echo "Master branch required." 1>&2
  exit 1
elif ! branch_exists $master; then
# Otherwise, if the branch doesn't exist, complain and leave
  echo "Master branch does not exist." 1>&2
  exit 1
fi

# Determine the starting branch
original="$(git symbolic-ref --short HEAD)"

# If the working directory is dirty, complain and leave
clean_status() {
  git status --porcelain
}
if test -n "$(clean_status)"; then
  echo "Working directory is dirty. Please stash or commit changes." 1>&2
  exit 1
fi

# Pull down changes from master
git merge $master --no-commit --no-ff 1> /dev/null 2> /dev/null

# If the branch is dirty
if test -n "$(clean_status)"; then
  # Clean up changes
  git reset --hard 1> /dev/null 2> /dev/null

  # Complain and leave
  echo "This branch is not up-to-date with $master. Please merge in changes." 1>&2
  exit 1
fi

# Keep track if $original.sqwished already existed
sqwished=$original.sqwished
if ! branch_exists $sqwished; then
  sqwished_is_new=1
fi

# Move to a sqwished branch based off of master
git checkout -B $sqwished $master 1> /dev/null 2> /dev/null

# Pull over all files from original branch
git merge --squash $original 1> /dev/null 2> /dev/null

# If there is a message, commit files with message and past commits
if test -n "$message"; then
  # Collect the commit message of those in $original but not in $master (since..until)
  past_commits="$(git log $master..$original --format='%s')"

  # Automatically commit with message (subject) and past_commits (body)
  git commit -F- <<EOF
$message

$past_commits
EOF
else
# Otherwise, open a pre-filled commit dialog (via .git/MERGE_MSG)
  # Add informative text
  git_dir="$(git rev-parse --git-dir)"
  cat <<EOF > "$git_dir/MERGE_MSG"
# Please write a subject for your commit
# If you don't, the subject will become the first log below

# Below are your previous commit messages
# These will become the body of the commit

EOF

  # Output each log message
  i=1
  git log $master..$original --format="%s" | \
  while read log; do
    echo "# Commit #$i" >> "$git_dir/MERGE_MSG"
    echo $log >> "$git_dir/MERGE_MSG"
    echo "" >> "$git_dir/MERGE_MSG"
    i=$((i+1))
  done

  # Open git commit dialog
  git commit
fi

# If the commit failed
if test $? -ne 0; then
  # Rollback to original
  git reset --hard 1> /dev/null 2> /dev/null
  git checkout $original 1> /dev/null 2> /dev/null

  # If the sqwished branch did not exist, delete it
  if test $sqwished_is_new -eq 1; then
    git branch -D $sqwished 1> /dev/null 2> /dev/null
  fi

  # Inform user
  echo "\`git sqwish\` failed. Rolling back to original branch." 1>&2
  exit 1
fi
